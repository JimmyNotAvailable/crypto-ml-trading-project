#!/usr/bin/env python3
"""
üè≠ V√ç D·ª§ PRODUCTION TH·ª∞C T·∫æ - TI·∫æNG VI·ªÜT
======================================

C√°c v√≠ d·ª• production th·ª±c t·∫ø minh h·ªça c√°ch tri·ªÉn khai ML models
trong m√¥i tr∆∞·ªùng giao d·ªãch crypto th·ª±c t·∫ø, ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát
ƒë·ªÉ d·ªÖ t√≠ch h·ª£p v√†o web interface v√† hi·ªÉu r√µ c√°ch ho·∫°t ƒë·ªông.
"""

import sys
import os
import pandas as pd
import numpy as np
import json
import pickle
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

# Th√™m th∆∞ m·ª•c g·ªëc d·ª± √°n v√†o ƒë∆∞·ªùng d·∫´n
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(project_root)

from app.ml.data_prep import load_prepared_datasets
from app.ml.algorithms import LinearRegressionModel, KNNClassifier, KNNRegressor, KMeansClusteringModel
from app.ml.model_registry import ModelRegistry

class BotGiaoDichTuDong:
    """Bot giao d·ªãch t·ª± ƒë·ªông s·ª≠ d·ª•ng d·ª± ƒëo√°n ML"""
    
    def __init__(self, so_du_ban_dau=10000):
        self.so_du = so_du_ban_dau
        self.so_du_ban_dau = so_du_ban_dau
        self.vi_the = {}  # Danh s√°ch c√°c v·ªã th·∫ø ƒëang m·ªü
        self.lich_su_giao_dich = []
        self.cac_mo_hinh = {}
        self.quan_ly_rui_ro = {
            'kich_thuoc_vi_the_toi_da': 0.2,  # 20% s·ªë d∆∞ m·ªói l·ªánh
            'stop_loss': 0.05,                # C·∫Øt l·ªó 5%
            'take_profit': 0.15,              # Ch·ªët l·ªùi 15%
            'do_tin_cay_toi_thieu': 0.7       # ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu
        }
        
        self._tai_cac_mo_hinh()
    
    def _tai_cac_mo_hinh(self):
        """T·∫£i v√† hu·∫•n luy·ªán c√°c m√¥ h√¨nh ML"""
        try:
            datasets = load_prepared_datasets('ml_datasets_top3')
            
            # Hu·∫•n luy·ªán v√† l∆∞u tr·ªØ c√°c m√¥ h√¨nh
            self.cac_mo_hinh['du_doan_gia'] = LinearRegressionModel(target_type='price')
            self.cac_mo_hinh['du_doan_gia'].train(datasets)
            
            self.cac_mo_hinh['phan_loai_xu_huong'] = KNNClassifier(n_neighbors=5)
            self.cac_mo_hinh['phan_loai_xu_huong'].train(datasets)
            
            self.cac_mo_hinh['phan_tich_thi_truong'] = KMeansClusteringModel(auto_tune=True)
            self.cac_mo_hinh['phan_tich_thi_truong'].train(datasets)
            
            print("‚úÖ C√°c m√¥ h√¨nh bot giao d·ªãch ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
            self.cac_mo_hinh = {}
    
    def phan_tich_thi_truong(self, du_lieu_thi_truong):
        """Ph√¢n t√≠ch th·ªã tr∆∞·ªùng to√†n di·ªán s·ª≠ d·ª•ng t·∫•t c·∫£ m√¥ h√¨nh ML"""
        try:
            # Chu·∫©n b·ªã ƒë·∫∑c tr∆∞ng (m·ªôt h√†ng DataFrame)
            features_df = pd.DataFrame([du_lieu_thi_truong])
            
            # D·ª± ƒëo√°n gi√°
            gia_du_doan = self.cac_mo_hinh['du_doan_gia'].predict(features_df)[0]
            gia_hien_tai = du_lieu_thi_truong.get('close', 0)
            thay_doi_gia_phan_tram = ((gia_du_doan - gia_hien_tai) / gia_hien_tai) * 100
            
            # Ph√¢n lo·∫°i xu h∆∞·ªõng
            xac_suat_xu_huong = self.cac_mo_hinh['phan_loai_xu_huong'].predict_proba(features_df)[0]
            cac_lop_xu_huong = self.cac_mo_hinh['phan_loai_xu_huong'].model.classes_
            du_doan_xu_huong = dict(zip(cac_lop_xu_huong, xac_suat_xu_huong))
            
            # Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng
            cum_thi_truong = self.cac_mo_hinh['phan_tich_thi_truong'].predict(features_df)[0]
            
            # T√≠nh ƒëi·ªÉm tin c·∫≠y (ƒë∆°n gi·∫£n h√≥a)
            do_tin_cay = min(
                self.cac_mo_hinh['du_doan_gia'].training_history['test_metrics']['r2'],
                max(xac_suat_xu_huong)
            )
            
            return {
                'gia_hien_tai': gia_hien_tai,
                'gia_du_doan': gia_du_doan,
                'thay_doi_gia_phan_tram': thay_doi_gia_phan_tram,
                'du_doan_xu_huong': du_doan_xu_huong,
                'cum_thi_truong': cum_thi_truong,
                'do_tin_cay': do_tin_cay,
                'thoi_gian': datetime.now()
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói trong ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {e}")
            return None
    
    def tao_tin_hieu_giao_dich(self, ket_qua_phan_tich):
        """T·∫°o t√≠n hi·ªáu giao d·ªãch d·ª±a tr√™n ph√¢n t√≠ch ML"""
        if not ket_qua_phan_tich or ket_qua_phan_tich['do_tin_cay'] < self.quan_ly_rui_ro['do_tin_cay_toi_thieu']:
            return {
                'hanh_dong': 'GI·ªÆ', 
                'ly_do': 'ƒê·ªô tin c·∫≠y th·∫•p ho·∫∑c ph√¢n t√≠ch th·∫•t b·∫°i',
                'do_tin_cay': ket_qua_phan_tich.get('do_tin_cay', 0) if ket_qua_phan_tich else 0
            }
        
        thay_doi_gia = ket_qua_phan_tich['thay_doi_gia_phan_tram']
        du_doan_xu_huong = ket_qua_phan_tich['du_doan_xu_huong']
        
        # T√¨m xu h∆∞·ªõng m·∫°nh nh·∫•t
        xu_huong_manh_nhat = max(du_doan_xu_huong.keys(), key=lambda x: du_doan_xu_huong[x])
        do_tin_cay_xu_huong = du_doan_xu_huong[xu_huong_manh_nhat]
        
        # Logic giao d·ªãch
        if thay_doi_gia > 5 and xu_huong_manh_nhat == 'Bullish' and do_tin_cay_xu_huong > 0.7:
            return {
                'hanh_dong': 'MUA',
                'ly_do': f'T√≠n hi·ªáu tƒÉng m·∫°nh: D·ª± ki·∫øn tƒÉng {thay_doi_gia:.2f}%',
                'kich_thuoc_vi_the': min(self.quan_ly_rui_ro['kich_thuoc_vi_the_toi_da'], do_tin_cay_xu_huong),
                'gia_muc_tieu': ket_qua_phan_tich['gia_du_doan'],
                'do_tin_cay': ket_qua_phan_tich['do_tin_cay'],
                'xu_huong_chinh': xu_huong_manh_nhat,
                'suc_manh_xu_huong': do_tin_cay_xu_huong
            }
        elif thay_doi_gia < -5 and xu_huong_manh_nhat == 'Bearish' and do_tin_cay_xu_huong > 0.7:
            return {
                'hanh_dong': 'B√ÅN',
                'ly_do': f'T√≠n hi·ªáu gi·∫£m m·∫°nh: D·ª± ki·∫øn gi·∫£m {abs(thay_doi_gia):.2f}%',
                'kich_thuoc_vi_the': min(self.quan_ly_rui_ro['kich_thuoc_vi_the_toi_da'], do_tin_cay_xu_huong),
                'gia_muc_tieu': ket_qua_phan_tich['gia_du_doan'],
                'do_tin_cay': ket_qua_phan_tich['do_tin_cay'],
                'xu_huong_chinh': xu_huong_manh_nhat,
                'suc_manh_xu_huong': do_tin_cay_xu_huong
            }
        else:
            return {
                'hanh_dong': 'GI·ªÆ',
                'ly_do': f'T√≠n hi·ªáu y·∫øu: {thay_doi_gia:.2f}% thay ƒë·ªïi, {xu_huong_manh_nhat} v·ªõi ƒë·ªô tin c·∫≠y {do_tin_cay_xu_huong:.2f}',
                'xu_huong_chinh': xu_huong_manh_nhat,
                'suc_manh_xu_huong': do_tin_cay_xu_huong
            }
    
    def thuc_hien_giao_dich(self, tin_hieu, du_lieu_thi_truong):
        """Th·ª±c hi·ªán giao d·ªãch d·ª±a tr√™n t√≠n hi·ªáu"""
        if tin_hieu['hanh_dong'] == 'GI·ªÆ':
            return {'trang_thai': 'khong_hanh_dong', 'thong_bao': tin_hieu['ly_do']}
        
        gia_hien_tai = du_lieu_thi_truong['close']
        gia_tri_vi_the = self.so_du * tin_hieu.get('kich_thuoc_vi_the', 0.1)
        
        giao_dich = {
            'thoi_gian': datetime.now(),
            'hanh_dong': tin_hieu['hanh_dong'],
            'gia': gia_hien_tai,
            'so_luong': gia_tri_vi_the / gia_hien_tai if tin_hieu['hanh_dong'] == 'MUA' else gia_tri_vi_the,
            'ly_do': tin_hieu['ly_do'],
            'do_tin_cay': tin_hieu.get('do_tin_cay', 0),
            'gia_muc_tieu': tin_hieu.get('gia_muc_tieu'),
            'stop_loss': gia_hien_tai * (1 - self.quan_ly_rui_ro['stop_loss']) if tin_hieu['hanh_dong'] == 'MUA' else gia_hien_tai * (1 + self.quan_ly_rui_ro['stop_loss']),
            'take_profit': gia_hien_tai * (1 + self.quan_ly_rui_ro['take_profit']) if tin_hieu['hanh_dong'] == 'MUA' else gia_hien_tai * (1 - self.quan_ly_rui_ro['take_profit'])
        }
        
        if tin_hieu['hanh_dong'] == 'MUA':
            chi_phi = giao_dich['so_luong'] * gia_hien_tai
            if chi_phi <= self.so_du:
                self.so_du -= chi_phi
                ma_vi_the = f"BTC_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                self.vi_the[ma_vi_the] = giao_dich
                self.lich_su_giao_dich.append(giao_dich)
                return {
                    'trang_thai': 'thuc_hien', 
                    'giao_dich': giao_dich,
                    'thong_bao': f'ƒê√£ mua {giao_dich["so_luong"]:.6f} BTC v·ªõi gi√° ${gia_hien_tai:.2f}'
                }
            else:
                return {
                    'trang_thai': 'khong_du_tien', 
                    'can_thiet': chi_phi, 
                    'co_san': self.so_du,
                    'thong_bao': f'Kh√¥ng ƒë·ªß ti·ªÅn: C·∫ßn ${chi_phi:.2f}, ch·ªâ c√≥ ${self.so_du:.2f}'
                }
        
        elif tin_hieu['hanh_dong'] == 'B√ÅN':
            # M√¥ ph·ªèng b√°n v·ªã th·∫ø c√≥ s·∫µn
            if self.vi_the:
                # B√°n v·ªã th·∫ø c≈© nh·∫•t
                ma_vi_the = list(self.vi_the.keys())[0]
                vi_the = self.vi_the.pop(ma_vi_the)
                
                # T√≠nh l√£i/l·ªó
                gia_mua = vi_the['gia']
                gia_tri_ban = vi_the['so_luong'] * gia_hien_tai
                lai_lo = gia_tri_ban - (vi_the['so_luong'] * gia_mua)
                
                self.so_du += gia_tri_ban
                giao_dich['lai_lo'] = lai_lo
                giao_dich['gia_mua_truoc'] = gia_mua
                giao_dich['phan_tram_lai_lo'] = (lai_lo / (vi_the['so_luong'] * gia_mua)) * 100
                self.lich_su_giao_dich.append(giao_dich)
                
                return {
                    'trang_thai': 'thuc_hien', 
                    'giao_dich': giao_dich, 
                    'lai_lo': lai_lo,
                    'thong_bao': f'ƒê√£ b√°n {vi_the["so_luong"]:.6f} BTC v·ªõi P&L: ${lai_lo:+.2f} ({giao_dich["phan_tram_lai_lo"]:+.2f}%)'
                }
            else:
                return {
                    'trang_thai': 'khong_co_vi_the', 
                    'thong_bao': 'Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒë·ªÉ b√°n'
                }
    
    def lay_tom_tat_hieu_suat(self):
        """L·∫•y t√≥m t·∫Øt hi·ªáu su·∫•t giao d·ªãch"""
        if not self.lich_su_giao_dich:
            return {'thong_bao': 'Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th·ª±c hi·ªán'}
        
        tong_giao_dich = len(self.lich_su_giao_dich)
        giao_dich_co_loi = sum(1 for gd in self.lich_su_giao_dich if gd.get('lai_lo', 0) > 0)
        
        tong_lai_lo = sum(gd.get('lai_lo', 0) for gd in self.lich_su_giao_dich)
        ty_le_thang = giao_dich_co_loi / tong_giao_dich if tong_giao_dich > 0 else 0
        roi = ((self.so_du - self.so_du_ban_dau) / self.so_du_ban_dau) * 100
        
        return {
            'so_du_ban_dau': self.so_du_ban_dau,
            'so_du_hien_tai': self.so_du,
            'tong_lai_lo': tong_lai_lo,
            'roi_phan_tram': roi,
            'tong_giao_dich': tong_giao_dich,
            'giao_dich_co_loi': giao_dich_co_loi,
            'ty_le_thang': ty_le_thang,
            'vi_the_mo': len(self.vi_the)
        }

def vi_du_1_mo_phong_bot_giao_dich():
    """V√≠ d·ª• 1: M√¥ ph·ªèng bot giao d·ªãch v·ªõi d·ª± ƒëo√°n ML"""
    print("ü§ñ V√ç D·ª§ 1: M√î PH·ªéNG BOT GIAO D·ªäCH T·ª∞ ƒê·ªòNG")
    print("=" * 60)
    
    try:
        # Kh·ªüi t·∫°o bot giao d·ªãch
        bot = BotGiaoDichTuDong(so_du_ban_dau=10000)
        
        # T·∫£i d·ªØ li·ªáu test ƒë·ªÉ m√¥ ph·ªèng
        datasets = load_prepared_datasets('ml_datasets_top3')
        du_lieu_test = datasets['test'].head(20)  # M√¥ ph·ªèng 20 phi√™n giao d·ªãch
        
        print(f"üöÄ B·∫Øt ƒë·∫ßu m√¥ ph·ªèng giao d·ªãch v·ªõi ${bot.so_du_ban_dau:,.2f}")
        print(f"üìä M√¥ ph·ªèng {len(du_lieu_test)} phi√™n giao d·ªãch...")
        
        print(f"\nüìö C√ÅCH HO·∫†T ƒê·ªòNG C·ª¶A BOT:")
        print(f"   üîπ S·ª≠ d·ª•ng 3 m√¥ h√¨nh ML: D·ª± ƒëo√°n gi√° + Ph√¢n lo·∫°i xu h∆∞·ªõng + Ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
        print(f"   üîπ √Åp d·ª•ng qu·∫£n l√Ω r·ªßi ro: Stop loss 5%, Take profit 15%")
        print(f"   üîπ Ch·ªâ giao d·ªãch khi ƒë·ªô tin c·∫≠y > 70%")
        print(f"   üîπ T·ªëi ƒëa 20% t√†i kho·∫£n m·ªói l·ªánh")
        
        # M√¥ ph·ªèng c√°c phi√™n giao d·ªãch
        for i, (_, du_lieu_thi_truong) in enumerate(du_lieu_test.iterrows()):
            print(f"\nüìà Phi√™n giao d·ªãch {i+1}:")
            gia_hien_tai = du_lieu_thi_truong['close']
            print(f"   üí∞ Gi√° hi·ªán t·∫°i: ${gia_hien_tai:.2f}")
            print(f"   üíº S·ªë d∆∞ t√†i kho·∫£n: ${bot.so_du:.2f}")
            
            # Ph√¢n t√≠ch th·ªã tr∆∞·ªùng
            ket_qua_phan_tich = bot.phan_tich_thi_truong(du_lieu_thi_truong.to_dict())
            
            if ket_qua_phan_tich:
                print(f"   üîÆ Gi√° d·ª± ƒëo√°n: ${ket_qua_phan_tich['gia_du_doan']:.2f} ({ket_qua_phan_tich['thay_doi_gia_phan_tram']:+.2f}%)")
                print(f"   üìä ƒê·ªô tin c·∫≠y: {ket_qua_phan_tich['do_tin_cay']:.3f}")
                
                # Hi·ªÉn th·ªã xu h∆∞·ªõng m·∫°nh nh·∫•t
                xu_huong_manh_nhat = max(ket_qua_phan_tich['du_doan_xu_huong'].keys(), 
                                        key=lambda x: ket_qua_phan_tich['du_doan_xu_huong'][x])
                do_manh = ket_qua_phan_tich['du_doan_xu_huong'][xu_huong_manh_nhat]
                print(f"   üìà Xu h∆∞·ªõng: {xu_huong_manh_nhat} ({do_manh:.3f})")
                
                # T·∫°o t√≠n hi·ªáu giao d·ªãch
                tin_hieu = bot.tao_tin_hieu_giao_dich(ket_qua_phan_tich)
                print(f"   üéØ T√≠n hi·ªáu: {tin_hieu['hanh_dong']} - {tin_hieu['ly_do']}")
                
                # Th·ª±c hi·ªán giao d·ªãch
                if tin_hieu['hanh_dong'] != 'GI·ªÆ':
                    ket_qua = bot.thuc_hien_giao_dich(tin_hieu, du_lieu_thi_truong.to_dict())
                    if ket_qua['trang_thai'] == 'thuc_hien':
                        giao_dich = ket_qua['giao_dich']
                        print(f"   ‚úÖ {ket_qua['thong_bao']}")
                        print(f"      üéØ M·ª•c ti√™u: ${giao_dich['gia_muc_tieu']:.2f}")
                        print(f"      üõ°Ô∏è Stop loss: ${giao_dich['stop_loss']:.2f}")
                        print(f"      üéÅ Take profit: ${giao_dich['take_profit']:.2f}")
                        
                        if 'lai_lo' in ket_qua:
                            mau_sac = "üíö" if ket_qua['lai_lo'] > 0 else "‚ù§Ô∏è"
                            print(f"      {mau_sac} P&L: ${ket_qua['lai_lo']:+.2f}")
                    else:
                        print(f"   ‚ùå {ket_qua['thong_bao']}")
                else:
                    print(f"   ‚è∏Ô∏è Gi·ªØ nguy√™n v·ªã th·∫ø")
            else:
                print("   ‚ùå Ph√¢n t√≠ch th·ªã tr∆∞·ªùng th·∫•t b·∫°i")
        
        # T√≥m t·∫Øt hi·ªáu su·∫•t
        hieu_suat = bot.lay_tom_tat_hieu_suat()
        
        print(f"\nüìä K·∫æT QU·∫¢ M√î PH·ªéNG BOT GIAO D·ªäCH:")
        print(f"{'='*50}")
        print(f"üí∞ S·ªë d∆∞ ban ƒë·∫ßu: ${hieu_suat['so_du_ban_dau']:,.2f}")
        print(f"üí∞ S·ªë d∆∞ cu·ªëi c√πng: ${hieu_suat['so_du_hien_tai']:,.2f}")
        print(f"üìà T·ªïng P&L: ${hieu_suat['tong_lai_lo']:+,.2f}")
        print(f"üìä ROI: {hieu_suat['roi_phan_tram']:+.2f}%")
        print(f"üéØ T·ªïng giao d·ªãch: {hieu_suat['tong_giao_dich']}")
        print(f"‚úÖ Giao d·ªãch c√≥ l·ªùi: {hieu_suat['giao_dich_co_loi']}")
        print(f"üèÜ T·ª∑ l·ªá th·∫Øng: {hieu_suat['ty_le_thang']:.1%}")
        print(f"üìç V·ªã th·∫ø ƒëang m·ªü: {hieu_suat['vi_the_mo']}")
        
        # ƒê√°nh gi√° k·∫øt qu·∫£
        if hieu_suat['roi_phan_tram'] > 5:
            print("\nüéâ BOT HO·∫†T ƒê·ªòNG R·∫§T T·ªêT!")
            print("   ‚úÖ Chi·∫øn l∆∞·ª£c ML hi·ªáu qu·∫£")
            print("   ‚úÖ Qu·∫£n l√Ω r·ªßi ro t·ªët")
        elif hieu_suat['roi_phan_tram'] > 0:
            print("\nüëç BOT HO·∫†T ƒê·ªòNG KH·∫®N TH·ªÇ")
            print("   ‚úÖ C√≥ l√£i nh∆∞ng c·∫ßn t·ªëi ∆∞u th√™m")
            print("   ‚ö†Ô∏è C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh tham s·ªë")
        else:
            print("\nüìâ BOT C·∫¶N C·∫¢I THI·ªÜN")
            print("   ‚ö†Ô∏è C·∫ßn xem x√©t l·∫°i chi·∫øn l∆∞·ª£c")
            print("   üîß ƒêi·ªÅu ch·ªânh qu·∫£n l√Ω r·ªßi ro")
        
        print(f"\nüí° G·ª¢I √ù C·∫¢I THI·ªÜN:")
        print(f"   üîß ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng ƒë·ªô tin c·∫≠y ({bot.quan_ly_rui_ro['do_tin_cay_toi_thieu']:.1f})")
        print(f"   üìä T·ªëi ∆∞u k√≠ch th∆∞·ªõc v·ªã th·∫ø ({bot.quan_ly_rui_ro['kich_thuoc_vi_the_toi_da']:.1%})")
        print(f"   üéØ T√πy ch·ªânh stop loss/take profit")
        print(f"   ü§ñ Th√™m c√°c m√¥ h√¨nh ML kh√°c")
        
        return {
            'bot': bot,
            'hieu_suat': hieu_suat,
            'lich_su_giao_dich': bot.lich_su_giao_dich
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói trong m√¥ ph·ªèng bot giao d·ªãch: {e}")
        return None

def vi_du_2_theo_doi_hieu_suat_mo_hinh():
    """V√≠ d·ª• 2: Theo d√µi hi·ªáu su·∫•t v√† ph√°t hi·ªán drift m√¥ h√¨nh"""
    print("\nüîç V√ç D·ª§ 2: THEO D√ïI HI·ªÜU SU·∫§T & PH√ÅT HI·ªÜN DRIFT")
    print("=" * 60)
    
    class BoDeoDoiHieuSuat:
        """B·ªô theo d√µi hi·ªáu su·∫•t m√¥ h√¨nh ML"""
        
        def __init__(self):
            self.nhat_ky_du_doan = []
            self.chi_so_mo_hinh = {}
            self.phat_hien_drift = {}
        
        def ghi_nhat_ky_du_doan(self, ten_mo_hinh, dac_trung, du_doan, thuc_te=None, thoi_gian=None):
            """Ghi nh·∫≠t k√Ω d·ª± ƒëo√°n ƒë·ªÉ ph√¢n t√≠ch sau"""
            muc_nhat_ky = {
                'thoi_gian': thoi_gian or datetime.now(),
                'ten_mo_hinh': ten_mo_hinh,
                'dac_trung': dac_trung.to_dict() if hasattr(dac_trung, 'to_dict') else dac_trung,
                'du_doan': du_doan,
                'thuc_te': thuc_te
            }
            self.nhat_ky_du_doan.append(muc_nhat_ky)
        
        def danh_gia_drift_mo_hinh(self, ten_mo_hinh, so_ngay_gan_day=7):
            """Ph√°t hi·ªán drift (suy gi·∫£m) hi·ªáu su·∫•t m√¥ h√¨nh"""
            du_doan_gan_day = [
                p for p in self.nhat_ky_du_doan 
                if p['ten_mo_hinh'] == ten_mo_hinh and 
                p['thoi_gian'] > datetime.now() - timedelta(days=so_ngay_gan_day) and
                p['thuc_te'] is not None
            ]
            
            if len(du_doan_gan_day) < 10:
                return {
                    'trang_thai': 'khong_du_du_lieu', 
                    'thong_bao': 'C·∫ßn √≠t nh·∫•t 10 d·ª± ƒëo√°n g·∫ßn ƒë√¢y ƒë·ªÉ ph√¢n t√≠ch'
                }
            
            # T√≠nh hi·ªáu su·∫•t g·∫ßn ƒë√¢y
            loi_gan_day = [abs(p['du_doan'] - p['thuc_te']) for p in du_doan_gan_day]
            mae_gan_day = np.mean(loi_gan_day)
            
            # So s√°nh v·ªõi hi·ªáu su·∫•t l·ªãch s·ª≠ (ƒë∆°n gi·∫£n h√≥a)
            du_doan_lich_su = [
                p for p in self.nhat_ky_du_doan 
                if p['ten_mo_hinh'] == ten_mo_hinh and 
                p['thoi_gian'] <= datetime.now() - timedelta(days=so_ngay_gan_day) and
                p['thuc_te'] is not None
            ]
            
            if len(du_doan_lich_su) < 10:
                return {'trang_thai': 'khong_du_du_lieu_lich_su'}
            
            loi_lich_su = [abs(p['du_doan'] - p['thuc_te']) for p in du_doan_lich_su]
            mae_lich_su = np.mean(loi_lich_su)
            
            # Ph√°t hi·ªán drift
            suy_giam_hieu_suat = (mae_gan_day - mae_lich_su) / mae_lich_su
            
            trang_thai_drift = 'on_dinh'
            if suy_giam_hieu_suat > 0.2:  # K√©m h∆°n 20%
                trang_thai_drift = 'drift_nghiem_trong'
            elif suy_giam_hieu_suat > 0.1:  # K√©m h∆°n 10%
                trang_thai_drift = 'drift_nhe'
            
            return {
                'trang_thai': trang_thai_drift,
                'mae_gan_day': mae_gan_day,
                'mae_lich_su': mae_lich_su,
                'thay_doi_hieu_suat_phan_tram': suy_giam_hieu_suat * 100,
                'khuyen_nghi': self._lay_khuyen_nghi_drift(trang_thai_drift)
            }
        
        def _lay_khuyen_nghi_drift(self, trang_thai_drift):
            """L·∫•y khuy·∫øn ngh·ªã d·ª±a tr√™n tr·∫°ng th√°i drift"""
            khuyen_nghi = {
                'on_dinh': "‚úÖ Hi·ªáu su·∫•t m√¥ h√¨nh ·ªïn ƒë·ªãnh. Ti·∫øp t·ª•c theo d√µi.",
                'drift_nhe': "‚ö†Ô∏è Ph√°t hi·ªán drift nh·∫π. C√¢n nh·∫Øc hu·∫•n luy·ªán l·∫°i v·ªõi d·ªØ li·ªáu m·ªõi.",
                'drift_nghiem_trong': "üö® Drift nghi√™m tr·ªçng. C·∫ßn hu·∫•n luy·ªán l·∫°i ngay ho·∫∑c chuy·ªÉn sang m√¥ h√¨nh d·ª± ph√≤ng."
            }
            return khuyen_nghi.get(trang_thai_drift, "‚ùì Tr·∫°ng th√°i drift kh√¥ng x√°c ƒë·ªãnh")
        
        def tao_bao_cao_hieu_suat(self):
            """T·∫°o b√°o c√°o hi·ªáu su·∫•t to√†n di·ªán"""
            if not self.nhat_ky_du_doan:
                return {'thong_bao': 'Ch∆∞a c√≥ d·ª± ƒëo√°n n√†o ƒë∆∞·ª£c ghi nh·∫≠t k√Ω'}
            
            # Hi·ªáu su·∫•t theo m√¥ h√¨nh
            hieu_suat_mo_hinh = {}
            for ten_mo_hinh in set(p['ten_mo_hinh'] for p in self.nhat_ky_du_doan):
                du_doan_mo_hinh = [p for p in self.nhat_ky_du_doan if p['ten_mo_hinh'] == ten_mo_hinh]
                
                co_gia_tri_thuc_te = [p for p in du_doan_mo_hinh if p['thuc_te'] is not None]
                if co_gia_tri_thuc_te:
                    loi = [abs(p['du_doan'] - p['thuc_te']) for p in co_gia_tri_thuc_te]
                    hieu_suat_mo_hinh[ten_mo_hinh] = {
                        'tong_du_doan': len(du_doan_mo_hinh),
                        'du_doan_da_xac_minh': len(co_gia_tri_thuc_te),
                        'mae': np.mean(loi),
                        'loi_lon_nhat': max(loi),
                        'do_chinh_xac_trong_5_phan_tram': sum(1 for e in loi if e/co_gia_tri_thuc_te[0]['thuc_te'] < 0.05) / len(loi)
                    }
            
            return {
                'tong_du_doan': len(self.nhat_ky_du_doan),
                'so_mo_hinh_theo_doi': len(hieu_suat_mo_hinh),
                'hieu_suat_mo_hinh': hieu_suat_mo_hinh,
                'thoi_gian_theo_doi': {
                    'bat_dau': min(p['thoi_gian'] for p in self.nhat_ky_du_doan),
                    'ket_thuc': max(p['thoi_gian'] for p in self.nhat_ky_du_doan)
                }
            }
    
    try:
        # Kh·ªüi t·∫°o b·ªô theo d√µi hi·ªáu su·∫•t
        bo_theo_doi = BoDeoDoiHieuSuat()
        
        # T·∫£i m√¥ h√¨nh v√† d·ªØ li·ªáu
        datasets = load_prepared_datasets('ml_datasets_top3')
        mo_hinh_gia = LinearRegressionModel(target_type='price')
        mo_hinh_gia.train(datasets)
        
        print("üìä M√¥ ph·ªèng theo d√µi d·ª± ƒëo√°n theo th·ªùi gian...")
        
        print(f"\nüìö QU√Å TR√åNH THEO D√ïI:")
        print(f"   üîπ Ghi nh·∫≠t k√Ω m·ªçi d·ª± ƒëo√°n v√† k·∫øt qu·∫£ th·ª±c t·∫ø")
        print(f"   üîπ So s√°nh hi·ªáu su·∫•t hi·ªán t·∫°i vs l·ªãch s·ª≠")
        print(f"   üîπ Ph√°t hi·ªán drift khi hi·ªáu su·∫•t gi·∫£m >10%")
        print(f"   üîπ ƒê∆∞a ra khuy·∫øn ngh·ªã h√†nh ƒë·ªông")
        
        # M√¥ ph·ªèng d·ª± ƒëo√°n theo th·ªùi gian v·ªõi drift d·∫ßn d·∫ßn
        du_lieu_test = datasets['X_test'].head(100)
        gia_thuc_te = datasets['y_test']['price'].head(100)
        
        for i, (_, dac_trung) in enumerate(du_lieu_test.iterrows()):
            # M√¥ ph·ªèng data drift b·∫±ng c√°ch th√™m nhi·ªÖu tƒÉng d·∫ßn
            he_so_drift = 1 + (i / 100) * 0.1  # 10% drift qua 100 d·ª± ƒëo√°n
            dac_trung_drift = dac_trung * he_so_drift
            
            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            du_doan = mo_hinh_gia.predict(pd.DataFrame([dac_trung_drift]))[0]
            thuc_te = gia_thuc_te.iloc[i]
            
            # Ghi nh·∫≠t k√Ω d·ª± ƒëo√°n
            thoi_gian = datetime.now() - timedelta(days=100-i)  # M√¥ ph·ªèng d·ªØ li·ªáu l·ªãch s·ª≠
            bo_theo_doi.ghi_nhat_ky_du_doan(
                ten_mo_hinh='du_doan_gia',
                dac_trung=dac_trung,
                du_doan=du_doan,
                thuc_te=thuc_te,
                thoi_gian=thoi_gian
            )
            
            # Ki·ªÉm tra ƒë·ªãnh k·ª≥ (m·ªói 20 d·ª± ƒëo√°n)
            if (i + 1) % 20 == 0:
                print(f"\n   üìà Ki·ªÉm tra theo d√µi l·∫ßn {(i+1)//20}:")
                
                # ƒê√°nh gi√° drift
                phan_tich_drift = bo_theo_doi.danh_gia_drift_mo_hinh('du_doan_gia', so_ngay_gan_day=20)
                
                if phan_tich_drift['trang_thai'] != 'khong_du_du_lieu':
                    print(f"      üéØ Tr·∫°ng th√°i drift: {phan_tich_drift['trang_thai']}")
                    print(f"      üìä MAE g·∫ßn ƒë√¢y: ${phan_tich_drift['mae_gan_day']:.2f}")
                    if 'mae_lich_su' in phan_tich_drift:
                        print(f"      üìä MAE l·ªãch s·ª≠: ${phan_tich_drift['mae_lich_su']:.2f}")
                        print(f"      üìà Thay ƒë·ªïi hi·ªáu su·∫•t: {phan_tich_drift['thay_doi_hieu_suat_phan_tram']:+.1f}%")
                    print(f"      üí° Khuy·∫øn ngh·ªã: {phan_tich_drift['khuyen_nghi']}")
                else:
                    print(f"      ‚è≥ {phan_tich_drift['thong_bao']}")
        
        # B√°o c√°o hi·ªáu su·∫•t cu·ªëi c√πng
        print(f"\nüìã B√ÅO C√ÅO HI·ªÜU SU·∫§T CU·ªêI C√ôNG:")
        print(f"{'='*50}")
        
        bao_cao = bo_theo_doi.tao_bao_cao_hieu_suat()
        
        print(f"üìä T·ªïng d·ª± ƒëo√°n: {bao_cao['tong_du_doan']}")
        print(f"ü§ñ M√¥ h√¨nh theo d√µi: {bao_cao['so_mo_hinh_theo_doi']}")
        
        for ten_mo_hinh, hieu_suat in bao_cao['hieu_suat_mo_hinh'].items():
            print(f"\n   üìà {ten_mo_hinh}:")
            print(f"      üìã T·ªïng d·ª± ƒëo√°n: {hieu_suat['tong_du_doan']}")
            print(f"      ‚úÖ ƒê√£ x√°c minh: {hieu_suat['du_doan_da_xac_minh']}")
            print(f"      üìä MAE: ${hieu_suat['mae']:.2f}")
            print(f"      ‚ö° L·ªói l·ªõn nh·∫•t: ${hieu_suat['loi_lon_nhat']:.2f}")
            print(f"      üéØ ƒê·ªô ch√≠nh x√°c (¬±5%): {hieu_suat['do_chinh_xac_trong_5_phan_tram']:.1%}")
        
        # Ki·ªÉm tra drift cu·ªëi c√πng
        drift_cuoi = bo_theo_doi.danh_gia_drift_mo_hinh('du_doan_gia', so_ngay_gan_day=30)
        print(f"\nüîç PH√ÇN T√çCH DRIFT CU·ªêI C√ôNG:")
        print(f"   üéØ Tr·∫°ng th√°i: {drift_cuoi['trang_thai']}")
        if drift_cuoi['trang_thai'] != 'khong_du_du_lieu':
            print(f"   üìà Thay ƒë·ªïi hi·ªáu su·∫•t: {drift_cuoi['thay_doi_hieu_suat_phan_tram']:+.1f}%")
            print(f"   üí° {drift_cuoi['khuyen_nghi']}")
        
        print(f"\nüéØ GI√Å TR·ªä C·ª¶A THEO D√ïI HI·ªÜU SU·∫§T:")
        print(f"   ‚úÖ Ph√°t hi·ªán s·ªõm suy gi·∫£m m√¥ h√¨nh")
        print(f"   ‚úÖ ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng d·ª± ƒëo√°n ·ªïn ƒë·ªãnh")
        print(f"   ‚úÖ T·ª± ƒë·ªông h√≥a quy tr√¨nh b·∫£o tr√¨ m√¥ h√¨nh")
        print(f"   ‚úÖ Cung c·∫•p b·∫±ng ch·ª©ng cho quy·∫øt ƒë·ªãnh kinh doanh")
        
        return {
            'bo_theo_doi': bo_theo_doi,
            'bao_cao': bao_cao,
            'phan_tich_drift': drift_cuoi
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói trong theo d√µi hi·ªáu su·∫•t m√¥ h√¨nh: {e}")
        return None

def main():
    """Ch·∫°y t·∫•t c·∫£ v√≠ d·ª• production ti·∫øng Vi·ªát"""
    print("üè≠ V√ç D·ª§ PRODUCTION CRYPTO ML - TI·∫æNG VI·ªÜT")
    print("=" * 60)
    print("Minh h·ªça c√°c t√¨nh hu·ªëng th·ª±c t·∫ø trong m√¥i tr∆∞·ªùng production")
    print("cho c√°c ·ª©ng d·ª•ng ML giao d·ªãch crypto.")
    print("")
    print("üéØ T√åNH HU·ªêNG PRODUCTION:")
    print("   ü§ñ Bot giao d·ªãch t·ª± ƒë·ªông v·ªõi ML")
    print("   üîç Theo d√µi v√† ph√°t hi·ªán drift m√¥ h√¨nh")
    print("   üìä B√°o c√°o hi·ªáu su·∫•t real-time")
    print("   ‚ö†Ô∏è Qu·∫£n l√Ω r·ªßi ro t·ª± ƒë·ªông")
    print("   üöÄ Tri·ªÉn khai v√† v·∫≠n h√†nh th·ª±c t·∫ø")
    
    cac_vi_du = [
        ("Bot giao d·ªãch t·ª± ƒë·ªông", vi_du_1_mo_phong_bot_giao_dich),
        ("Theo d√µi hi·ªáu su·∫•t m√¥ h√¨nh", vi_du_2_theo_doi_hieu_suat_mo_hinh)
    ]
    
    ket_qua = {}
    thanh_cong = 0
    
    for i, (ten_vi_du, ham_vi_du) in enumerate(cac_vi_du, 1):
        try:
            print(f"\nüîÑ ƒêang ch·∫°y V√≠ d·ª• Production {i}: {ten_vi_du}...")
            result = ham_vi_du()
            ket_qua[ham_vi_du.__name__] = result
            
            if result is not None:
                thanh_cong += 1
                print(f"‚úÖ V√≠ d·ª• Production {i} ho√†n th√†nh th√†nh c√¥ng!")
            else:
                print(f"‚ö†Ô∏è V√≠ d·ª• Production {i} c√≥ v·∫•n ƒë·ªÅ!")
                
        except Exception as e:
            print(f"‚ùå V√≠ d·ª• Production {i} th·∫•t b·∫°i: {e}")
            ket_qua[ham_vi_du.__name__] = None
    
    # T·ªïng k·∫øt
    tong_so = len(cac_vi_du)
    print(f"\n{'='*60}")
    print("üéØ T·ªîNG K·∫æT V√ç D·ª§ PRODUCTION")
    print(f"{'='*60}")
    print(f"‚úÖ Th√†nh c√¥ng: {thanh_cong}/{tong_so}")
    
    if thanh_cong == tong_so:
        print("\nüéâ T·∫§T C·∫¢ V√ç D·ª§ PRODUCTION HO√ÄN TH√ÄNH!")
        print("üöÄ B·∫°n ƒë√£ hi·ªÉu r√µ c√°ch tri·ªÉn khai ML trong th·ª±c t·∫ø!")
        
        print(f"\nüìö K·ª∏ NƒÇNG PRODUCTION ƒê√É TH√ÄNH TH·∫†O:")
        print(f"   ü§ñ Bot giao d·ªãch t·ª± ƒë·ªông v·ªõi d·ª± ƒëo√°n ML")
        print(f"   üîç Ph√°t hi·ªán v√† x·ª≠ l√Ω drift m√¥ h√¨nh")
        print(f"   üìä Theo d√µi hi·ªáu su·∫•t v√† b√°o c√°o")
        print(f"   ‚ö†Ô∏è Qu·∫£n l√Ω r·ªßi ro trong trading")
        print(f"   üõ°Ô∏è X·ª≠ l√Ω l·ªói v√† monitoring s·ª©c kh·ªèe")
        print(f"   üí∞ ·ª®ng d·ª•ng th·ª±c t·∫ø trong giao d·ªãch")
        
        print(f"\nüéØ √ÅP D·ª§NG V√ÄO WEB INTERFACE:")
        print(f"   1. Dashboard theo d√µi bot giao d·ªãch real-time")
        print(f"   2. Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t v√† P&L")
        print(f"   3. C·∫£nh b√°o drift v√† ch·∫•t l∆∞·ª£ng m√¥ h√¨nh")
        print(f"   4. Giao di·ªán qu·∫£n l√Ω r·ªßi ro")
        print(f"   5. B√°o c√°o giao d·ªãch t·ª± ƒë·ªông")
        print(f"   6. API endpoints cho mobile app")
        
        print(f"\nüîó B∆Ø·ªöC TI·∫æP THEO CHO PRODUCTION TH·ª∞C T·∫æ:")
        print(f"   1. Thi·∫øt l·∫≠p infrastructure cloud (AWS/GCP/Azure)")
        print(f"   2. Implement CI/CD pipeline")
        print(f"   3. Th√™m logging v√† monitoring to√†n di·ªán")
        print(f"   4. B·∫£o m·∫≠t v√† authentication")
        print(f"   5. Database cho l∆∞u tr·ªØ d·ª± ƒëo√°n v√† giao d·ªãch")
        print(f"   6. Dashboard v√† alerting system")
        
    else:
        print(f"\n‚ö†Ô∏è M·ªòT S·ªê V√ç D·ª§ C·∫¶N KH·∫ÆC PH·ª§C")
        print("üîç Xem chi ti·∫øt l·ªói ·ªü tr√™n ƒë·ªÉ ƒëi·ªÅu ch·ªânh.")
    
    print(f"\nüí° L∆ØU √ù QUAN TR·ªåNG:")
    print(f"   üö® ƒê√¢y l√† v√≠ d·ª• gi√°o d·ª•c, kh√¥ng ph·∫£i t∆∞ v·∫•n t√†i ch√≠nh")
    print(f"   üìä Lu√¥n test k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi d√πng ti·ªÅn th·∫≠t")
    print(f"   üí∞ Ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn c√≥ th·ªÉ ch·∫•p nh·∫≠n m·∫•t")
    print(f"   üîÑ C·∫≠p nh·∫≠t m√¥ h√¨nh th∆∞·ªùng xuy√™n")
    print(f"   ‚öñÔ∏è Tu√¢n th·ªß quy ƒë·ªãnh ph√°p lu·∫≠t v·ªÅ giao d·ªãch")
    
    return ket_qua

if __name__ == "__main__":
    main()